STACK BASIC:

#include<stdio.h>
#include<ctype.h>
#include<string.h>
#define MAX 5
typedef struct stack
{
   int a[MAX];
   int top;
}stack;
void init(stack *s)
{
    s->top=-1;
}
int isempty(stack *s)
{
    if(s->top==-1)
      return 1;
    return 0;  
}
int isfull(stack *s)
{
    if(s->top==MAX-1)
      return 1;
    return 0;  
}
int push(stack *s,int x)
{
    s->top=s->top+1;
    s->a[s->top]=x;
}
int pop(stack *s)
{
    int x;
    x=s->a[s->top];
    s->top=s->top-1;
    return x;
}
void display(stack *s)
{
    int i=0;
    while(i<=s->top)
    {
        printf("%d,",s->a[i]);
        i++;
    }
    printf("\n");
}
int top(stack *s)
{
    return(s->a[s->top]);
}
void main()
{
   stack s;
   int n,i,x;
   init(&s);
   printf("1.PUSH\n2.POP\n3.DISPAY\n4.EXIT\n");
   do{
       printf("ENTER YOUR CHOICE\n");
       scanf("%d",&n);
       switch(n)
       {
           case 1:
                 if(isfull(&s))
                     printf("STACK IS FULL!\n");
                 else
                 {
                     printf("ENTER ELEMENT \n");
                     scanf("%d",&x);
                     push(&s,x);
                 }
            break;
            case 2:
                 if(isempty(&s))
                     printf("STACK IS EMPTY!\n");
                 else
                 {
                    x=pop(&s);
                    printf("POPPED ELEMENT IS:%d \n",x);
                 }
            break;
            case 3:
                 if(isempty(&s))
                      printf("STACK IS EMPTY! CANNOT DISPLAY\n");
                 else
                    display(&s);
            break;
            default:
                printf("OKAY BYE");
                 }
       }while(n<=3);
   }




EVALUATION OF PREFIX:
#include<stdio.h>
#include<string.h>
#include<ctype.h>
typedef struct stack
{
    int data[20];
    int top;
}stack;
int evaluate(char x,int op1,int op2)
{
    if(x=='+')
        return (op1+op2);
    if(x=='-')
        return (op1-op2);
    if(x=='/')
        return (op1/op2);
    if(x=='*')
        return (op1*op2);
    if(x=='%')
        return (op1%op2);
}
void init(stack *s)
{
    s->top=-1;
}
int isempty(stack *s)
{
    if(s->top==-1)
        return 1;
    return 0;
}
int isfull(stack *s)
{
    if(s->top==19)
        return 1;
    return 0;
}
void push(stack *s,int x)
{
    s->top++;
    s->data[s->top]=x;
}
int pop(stack *s)
{
    int x;
    x=s->data[s->top];
    s->top--;
    return x;
}
int main()
{
    stack s;
    char x,a[20];
    int op1,op2,val,n;
    init(&s);
    printf("Enter the expressionn :");
    gets(a);
    n=strlen(a);
    for(int i=n-1;i>=0;i--)
    {
        x=a[i];
        if(isdigit(x))
            push(&s,x-48);
        else
        {
            op1=pop(&s);
            op2=pop(&s);
            val=evaluate(x,op1,op2);
            push(&s,val);
        }
    }
    val=pop(&s);
    printf("\nValue of expression = %d",val);
}

















EVALUATION OF POSTFIX:

#include<stdio.h>
#include<ctype.h>
#include<string.h>
#define MAX 20
typedef struct stack
{
   int a[MAX];
   int top;
}stack;
void init(stack *s)
{
    s->top=-1;
}
int isempty(stack *s)
{
    if(s->top==-1)
      return 1;
    return 0;  
}
int isfull(stack *s)
{
    if(s->top==MAX-1)
      return 1;
    return 0;  
}
void push(stack *s,int x)
{
    s->top=s->top+1;
    s->a[s->top]=x;
}
int pop(stack *s)
{
    int x;
    x=s->a[s->top];
    s->top=s->top-1;
    return x;
}
int top(stack *s)
{
    return(s->a[s->top]);
}
int evaluate(char x,int op1,int op2)
{
    if(x=='+')
      return(op1+op2);
    else if(x=='-')
      return(op1-op2);
    else if(x=='*')
      return(op1*op2);
    else if(x=='/')
      return(op1/op2);
    else if(x=='%')
      return(op1%op2); 
}
int main()
{
  stack s;
  char x;
  int op1,op2,val;
  init(&s);
  printf("Enter the expression / single digit operand and operators only: \n");
  while((x=getchar())!='\n')
  {
    if(isdigit(x))
       push(&s,x-48); 
    else
    {
      op2=pop(&s);
      op1=pop(&s);
      val=evaluate(x,op1,op2);
      push(&s,val);
    }   
  }
  val=pop(&s);
  printf("VALUE OF EXPRESSION: %d",val);
}














INFIX TO POSTFIX:

#include<stdio.h>
#include<ctype.h>
#define MAX 50

typedef struct stack
{
    int data[MAX];
    int top;
} stack;
void init (stack *s)
    {
        s->top=-1;
    }
int empty(stack *s)
    {
        if (s->top==-1)
            return 1;
        return 0;
    }
int full(stack *s)
    {
        if (s->top==MAX-1)
            return 1;
        return 0;
    }
void push(stack *s,int x)
    {
       s->top=s->top+1;
       s->data[s->top]=x;
    }
int pop(stack *s)
    {
        int x;
        x=s->data[s->top];
        s->top=s->top-1;
        return x;
    }
int top(stack *s)
    {
        return (s->data[s->top]);
    }
int precedence(char x)
    {
     if (x=='(')
        return 0;
     if (x=='+'||x=='-')
        return 1;
     if (x=='*'||x=='/'||x=='%')
        return 2;
     return 3;
    }
void inf_to_post(char infix[],char postfix[])
{
    stack s;
    char x;
    int i,j=0;
    char token;
    init (&s);
 for (i=0;infix[i]!='\0';i++)
 {
     token=infix[i];
     //printf("%c\n",token);
     if (isalnum(token)){
        postfix[j++]=token;
        }
     else
        if (token=='(')
            push(&s,'(');
     else
        if (token==')')
        while ((x=pop(&s))!='(')
               postfix[j++]=x;
     else
      {
         while(precedence(token)<=precedence(top(&s))&&!empty(&s))
         {
             x=pop(&s);
             postfix[j++]=x;

             }
             push (&s,token);
      }
 }

         while (!empty(&s))
         {
             x=pop(&s);
             postfix[j++]=x;
             //printf("%s",postfix);
         }
             postfix[j]='\0';
             printf("%s",postfix);

}
void main()
{
    char infix[30],postfix[30];
    printf("ENTER INFIX EXPRESSION: ");
    gets(infix);
    inf_to_post(infix,postfix);
}












































INFIX TO PREFIX:

#include <stdio.h>
#include <ctype.h>
#include <string.h>
typedef struct stack
{
    int data[20];
    int top;
}stack;
int precedence(char x)
{
    if(x=='(')
        return 0;
    if(x=='+' || x=='-')
        return 1;
    if(x=='*' || x=='/' || x=='%')
        return 2;
    return 3;
}
void init(stack *s)
{
    s->top=-1;
}
int isempty(stack *s)
{
    if(s->top==-1)
        return 1;
    return 0;
}
int isfull(stack *s)
{
    if(s->top==24)
        return 1;
    return 0;
}
void push(stack *s,int x)
{
    s->top++;
    s->data[s->top]=x;
}
int pop(stack *s)
{
    int x;
    x=s->data[s->top];
    s->top--;
    return x;
}
int top(stack *s)
{
    return s->data[s->top];
}
void infix_to_prefix(char infix[],char prefix[])
{
    stack s;
    char x,temp;
    int i,j,n;
    char token;
    init(&s);
    n=strlen(infix);
    for(i=0,j=n-1;i<j;i++,j--)
    {
        temp=infix[i];
        infix[i]=infix[j];
        infix[j]=temp;
    }    
    for(i=0;i<n;i++)
    {
        if(infix[i]=='(')
            infix[i]=')';
        else if(infix[i]==')')
            infix[i]='(';
    }
    j=0;
    for(i=0;infix[i]!='\0';i++)
    {
        token=infix[i];
        if(isalnum(token))
            prefix[j++]=token;
        else if(token=='(')
            push(&s,token);
        else if(token==')')
        {
            while((x=pop(&s))!='(')
                prefix[j++]=x;
        }
        else
        {
            while(precedence(token)<=precedence(top(&s)) && !isempty(&s))
            {
                x=pop(&s);
                prefix[j++]=x;
            }
            push(&s,token);
        }
    }
    while(!isempty(&s))
    {
        x=pop(&s);
        prefix[j++]=x;
    }
    prefix[j]='\0';
    n=strlen(prefix);
    for(i=0,j=n-1;i<j;i++,j--)
    {
        temp=prefix[i];
        prefix[i]=prefix[j];
        prefix[j]=temp;
    }
}
int main()
{
    char infix[30],prefix[30];
    printf("Enter an infix expression :");
    gets(infix);
    infix_to_prefix(infix,prefix);
    printf("prefix : %s",prefix);
}




















POSTFIX TO PREFIX:

#include<stdio.h>
#include<string.h>
#include<ctype.h>
int main()
{
    char s[20][20],s1[20],s2[20],s3[20],token;
    int i,j,n,top=-1;
    printf("ENTER THE EXPRESSION \n");
    scanf("%s",s1);
    n=strlen(s1);
    for(i=0;i<n;i++)
    {
        token=s1[i];
        if(isalnum(token))
        {
            s2[0]=token;
            s2[1]='\0';
            top++;
            strcpy(s[top],s2);
        }
        else
        {
          s2[0]=token;
          s2[1]='\0';
          strcat(s2,s[top-1]);
          strcat(s2,s[top]);
          strcpy(s[top-1],s2);
          top=top-1;
        }
    }
    puts(s[top]);
}











PREFIX TO POSTFIX:

#include<stdio.h>
#include<string.h>
#include<ctype.h>
int main()
{
    char s[20][20],s1[20],s2[20],s3[20],token;
    int i,j,n,top=-1;
    printf("ENTER THE EXPRESSION \n");
    scanf("%s",s1);
    n=strlen(s1);
    for(i=n-1;i>-1;i--)
    {
        token=s1[i];
        if(isalnum(token))
        {
            s2[0]=token;
            s2[1]='\0';
            top++;
            strcpy(s[top],s2);
        }
        else
        {
          strcpy(s2,"");
          strcat(s2,s[top]);
          strcat(s2,s[top-1]);
          s3[0]=token;
          s3[1]='\0';
          strcat(s2,s3);
          strcpy(s[top-1],s2);
          top=top-1;
        }
    }
    puts(s[top]);
}









POSTFIX TO INFIX:

#include<stdio.h>
#include<string.h>
#include<ctype.h>
int main()
{
  char s[20][20],s1[20],s2[20],s3[20],token;
  int i,j,n,top=-1;
  printf("ENTER THE EXPRESSION \n");
  scanf("%s",s1);
  n=strlen(s1);
  for(i=0;i<n;i++)
  {
    token=s1[i];
    if(isalnum(token))
    {
      s2[0]=token;
      s2[1]='\0';
      top++;
      strcpy(s[top],s2);
    }
    else
    {
      s2[0]='(';
      s2[1]='\0';
      strcat(s2,s[top-1]);
      s3[0]=token;
      s3[1]='\0';
      strcat(s2,s3);
      strcat(s2,s[top]);
      s3[0]=')';
      s3[1]='\0';
      strcat(s2,s3);
      strcpy(s[top-1],s2);
      top=top-1;
    }
  }
  puts(s[top]);
}





PREFIX TO INFIX:

#include<stdio.h>
#include<string.h>
#include<ctype.h>
int main()
{
  char s[20][20],s1[20],s2[20],s3[20],token;
  int i,j,n,top=-1;
  printf("ENTER EXPRESSION\n");
  scanf("%s",s1);
  n=strlen(s1);
  for(i=n-1;i>=0;i--)
  {
    token=s1[i];
    if(isalnum(token))
    {
        s2[0]=token;
        s2[1]='\0';
        top++;
        strcpy(s[top],s2);
    }
    else
    {
        s2[0]='(';
        s2[1]='\0';
        strcat(s2,s[top]);
        s3[0]=token;
        s3[1]='\0';
        strcat(s2,s3);
        strcat(s2,s[top-1]);
        s3[0]=')';
        s3[1]='\0';
        strcat(s2,s3);
        strcpy(s[top-1],s2);
        top=top-1;
    }
  }
  puts(s[top]);
}
