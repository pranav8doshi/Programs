LINEAR QUEUE

#include<stdio.h>
typedef struct queue
{
    int a[10];
    int F,R;
}queue;
void  init(queue *p)
{
    p->F=p->R=-1;
}
int isempty(queue *p)
{
    if(p->R==-1)
      return 1;
    return 0;  
}
int isfull(queue *p)
{
    if((p->R+1)%10==p->F)
      return 1;
    return 0;  
}
void enqueue(queue *p,int x)
{
    if(p->R==-1)
      p->R=p->F=0;
    else
      p->R++;
    p->a[p->R]=x;    
}
int dequeue(queue *p)
{
  int x=p->a[p->F];
  if(p->F==p->R)
     p->F=p->R=-1;
  else 
     p->F=p->F+1;
  return x;      
}
void display(queue *p)
{
  int i=p->F;
  while(i<=p->R)
  {
    printf("%d ",p->a[i]);
    i++;
  }
}
int main()
{
  queue q;
  init(&q);
  int x,ch;
  printf("\n1.ENQUEUE\n2.DEQUEUE\n3.DISPLAY\n");
  do
  {
   printf("ENTER CHOICE\n");
   scanf("%d",&ch); 
   switch(ch)
     {
      case 1:
          if((isfull(&q)))
             printf("QUEUE IS FULL!\n");
          else
          {  
           printf("ENTER ELEMENT\n");
           scanf("%d",&x);
           enqueue(&q,x);
          } 
           break;
      case 2:
          if((isempty(&q)))
             printf("QUEUE IS FULL!\n");
          else
          {   
           x=dequeue(&q);
           printf("DELETED ELEMENT IS %d \n",x);
          } 
           break;       
      case 3:
        if(isempty(&q))
           printf("QUEUE IS EMPTY!\n");
        else   
          {
            display(&q);
            printf("\n");
          }
        break;       
      default:
          printf("OKAY BYE!");    
   } 
  }while(ch>0&&ch<4);
}








CIRCULAR QUEUE


#include<stdio.h>
typedef struct Queue
{
    int a[10];
    int F,R;
}Queue;
void init(Queue *p)
{
    p->F=p->R=-1;
}
int isEmpty(Queue *p)
{
    if(p->R==-1)
      return 1;
    return 0;  
}
int isFull(Queue *p)
{
    if((p->R+1)%10==p->F)
       return 1;
    return 0;   
}
void enqueue(Queue *p,int x)
{
    if(p->R==-1)
       p->F=p->R=0;
    else
    {
       p->R=(p->R+1)%10;
      
    }   
     p->a[p->R]=x;
}
int dequeue(Queue *p)
{
    int x=p->a[p->F];
    if(p->F==p->R)
       p->F=p->R=-1;
    else
       p->F=(p->F+1)%10;
    return x;   
}
void display(Queue *p)
{
    int i=p->F;
    while(i!=p->R)
    {
        printf("%d",p->a[i]);
        i=(i+1)%10;
    }
    printf("%d ",p->a[i]);
}
int main()
{ 
  Queue p;
  init(&p);
  int x,ch;
  printf("\n1.ENQUEUE\n2.DEQUEUE\n3.DISPLAY\n");
  do
  {
   printf("ENTER CHOICE\n");
   scanf("%d",&ch); 
   switch(ch)
     {
      case 1:
          if((isFull(&p)))
             printf("QUEUE IS FULL!\n");
          else
          {  
           printf("ENTER ELEMENT\n");
           scanf("%d",&x);
           enqueue(&p,x);
          } 
           break;
      case 2:
          if((isEmpty(&p)))
             printf("QUEUE IS EMPTY!\n");
          else
          {   
           x=dequeue(&p);
           printf("DELETED ELEMENT IS %d \n",x);
          } 
           break;       
      case 3:
        if(isEmpty(&p))
           printf("QUEUE IS EMPTY!\n");
        else   
          {
            display(&p);
            printf("\n");
          }
        break;       
      default:
          printf("OKAY BYE!");    
   } 
  }while(ch>0&&ch<4);
}

